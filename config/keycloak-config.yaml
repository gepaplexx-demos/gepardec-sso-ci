kind: ConfigMap
apiVersion: v1
metadata:
  name: gepardec-sso-config
data:
  01_gepardec.yaml: |
    realm: gepardec
    enabled: true
    identityProviders:
    - enabled: true
      alias: 'google'
      providerId: 'google'
      updateProfileFirstLoginMode: 'on'
      trustEmail: true
      storeToken: false
      addReadTokenRoleOnCreate: false
      authenticateByDefault: false
      linkOnly: false
      firstBrokerLoginFlowAlias: 'first broker login'
      config:
        onlineAccess: 'false'
        userIp: 'false'
        clientId: '$(properties:/secrets/secrets.properties::MEGA_CLIENT_ID)'
        clientSecret: '$(properties:/secrets/secrets.properties::MEGA_CLIENT_SECRET)'
        hostedDomain: "gepardec.com"
        syncMode: FORCE
    
    identityProviderMappers:
    - name: "picture"
      identityProviderAlias: "google"
      identityProviderMapper: "google-user-attribute-mapper"
      config:
        claims: "[]"
        syncMode: "INHERIT"
        attributes: "[]"
        jsonField: "picture"
        userAttribute: "picture"

    smtpServer:
      starttls: "false"
      auth: ""
      port: "465"
      host: "smtp.gmail.com"
      replyTo: ""
      from: "service@gepardec.com"
      fromDisplayName: ""
      envelopeFrom: ""
      ssl: "true"

  01_gepardec_mega.yaml: |
    realm: gepardec
    clients:
    - clientId: mega
      name: MEGA
      description: ''
      rootUrl: https://mega-frontend-feature-gepardec-sso.apps.play.gepaplexx.com
      adminUrl: ''
      baseUrl: ''
      surrogateAuthRequired: false
      enabled: true
      alwaysDisplayInConsole: false
      clientAuthenticatorType: client-secret
      redirectUris:
        - https://mega-frontend-feature-gepardec-sso.apps.play.gepaplexx.com
      webOrigins:
        - "+"
      notBefore: 0
      bearerOnly: false
      consentRequired: false
      standardFlowEnabled: true
      implicitFlowEnabled: false
      directAccessGrantsEnabled: false
      serviceAccountsEnabled: false
      publicClient: true
      frontchannelLogout: true
      protocol: openid-connect
      attributes:
        oidc.ciba.grant.enabled: 'false'
        backchannel.logout.session.required: 'true'
        post.logout.redirect.uris: "+"
        display.on.consent.screen: 'false'
        oauth2.device.authorization.grant.enabled: 'false'
        backchannel.logout.revoke.offline.tokens: 'false'
      authenticationFlowBindingOverrides: {}
      fullScopeAllowed: true
      nodeReRegistrationTimeout: -1
      protocolMappers:
        - name: audience
          protocol: openid-connect
          protocolMapper: oidc-audience-mapper
          consentRequired: false
          config:
            included.client.audience: mega
            id.token.claim: 'false'
            access.token.claim: 'true'
            userinfo.token.claim: 'false'
      defaultClientScopes:
        - profile
        - microprofile-jwt
        - email
      optionalClientScopes:
        - web-origins
        - acr
        - address
        - phone
        - offline_access
        - roles
      access:
        view: true
        configure: true
        manage: true

  02_master.yaml: |
    realm: master
    roles:
      realm:
      - name: admin-role-gepardec-realm
        description: 'Administrator role for managing the realm gepardec'
        composite: true
        composites:
          client:
            gepardec-realm:
            - manage-authorization
            - view-events
            - view-clients
            - query-realms
            - view-authorization
            - query-users
            - view-users
            - manage-identity-providers
            - view-realm
            - manage-events
            - view-identity-providers
            - create-client
            - query-groups
            - manage-clients
            - manage-users
            - impersonation
            - manage-realm
            - query-clients
        clientRole: false
      - name: client-admin-gepardec-realm
        description: 'Administrator role for managing clients in the realm gepardec'
        composite: true
        composites:
          client:
            gepardec-realm:
            - create-client
            - manage-clients
            - view-clients
        clientRole: false

    users:
      - username: client-admin-gepardec
        enabled: true
        realmRoles:
          - "client-admin-gepardec-realm"
      - username: admin-gepardec
        enabled: true
        realmRoles:
          - "admin-role-gepardec-realm"
